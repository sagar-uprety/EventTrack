"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("babel-runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("babel-runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _queryBuilder = _interopRequireDefault(require("./query-builder"));

function ValueStatGetter(model, params, opts) {
  var queryBuilder = new _queryBuilder.default(model, params, opts);

  this.perform = function () {
    return new _bluebird.default(function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(resolve, reject) {
        var jsonQuery, query, sum;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return queryBuilder.getQueryWithFiltersAndJoins(null);

              case 2:
                jsonQuery = _context.sent;
                query = model.aggregate(jsonQuery);
                sum = 1;

                if (params.aggregate_field) {
                  sum = "$".concat(params.aggregate_field);
                }

                query.group({
                  _id: null,
                  total: {
                    $sum: sum
                  }
                }).exec(function (err, records) {
                  if (err) {
                    return reject(err);
                  }

                  if (!records || !records.length) {
                    return resolve({
                      value: 0
                    });
                  }

                  return resolve({
                    value: records[0].total
                  });
                });

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  };
}

module.exports = ValueStatGetter;