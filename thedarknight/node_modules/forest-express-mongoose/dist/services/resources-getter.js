"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("babel-runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("babel-runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _forestExpress = _interopRequireDefault(require("forest-express"));

var _queryBuilder = _interopRequireDefault(require("./query-builder"));

var _schema = _interopRequireDefault(require("../utils/schema"));

function ResourcesGetter(model, opts, params) {
  var schema = _forestExpress.default.Schemas.schemas[_schema.default.getModelName(model)];

  var queryBuilder = new _queryBuilder.default(model, params, opts);
  var fieldsSearched = null;

  function getSegment() {
    if (schema.segments && params.segment) {
      return _lodash.default.find(schema.segments, function (currentSegment) {
        return currentSegment.name === params.segment;
      });
    }

    return null;
  }

  function getSegmentCondition() {
    var segment = getSegment();

    if (segment && segment.where && typeof segment.where === 'function') {
      return segment.where().then(function (where) {
        return {
          where: where
        };
      });
    }

    return new _bluebird.default(function (resolve) {
      return resolve(segment);
    });
  }

  this.perform = function () {
    return getSegmentCondition().then(function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(segment) {
        var jsonQuery;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                jsonQuery = [];
                _context.next = 3;
                return queryBuilder.addProjection(jsonQuery);

              case 3:
                _context.next = 5;
                return queryBuilder.addFiltersAndJoins(jsonQuery, segment);

              case 5:
                if (!params.search) {
                  _context.next = 9;
                  break;
                }

                fieldsSearched = queryBuilder.getFieldsSearched();

                if (!(fieldsSearched.length === 0 && !queryBuilder.hasSmartFieldSearch())) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", []);

              case 9:
                if (params.sort) {
                  queryBuilder.addSortToQuery(jsonQuery);
                }

                queryBuilder.addSkipAndLimitToQuery(jsonQuery);
                _context.next = 13;
                return queryBuilder.joinAllReferences(jsonQuery);

              case 13:
                return _context.abrupt("return", model.aggregate(jsonQuery));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()).then(function (records) {
      return [records, fieldsSearched];
    });
  };

  this.count = function () {
    return getSegmentCondition().then(function () {
      var _ref2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(segment) {
        var jsonQuery;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return queryBuilder.getQueryWithFiltersAndJoins(segment);

              case 2:
                jsonQuery = _context2.sent;
                queryBuilder.addCountToQuery(jsonQuery);
                return _context2.abrupt("return", model.aggregate(jsonQuery).then(function (result) {
                  return result[0] ? result[0].count : 0;
                }));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
  };
}

module.exports = ResourcesGetter;