"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("babel-runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("babel-runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("babel-runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("babel-runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _forestExpress = _interopRequireDefault(require("forest-express"));

var _schema = _interopRequireDefault(require("../utils/schema"));

var _orm = _interopRequireDefault(require("../utils/orm"));

var _searchBuilder = _interopRequireDefault(require("./search-builder"));

var _filtersParser = _interopRequireDefault(require("./filters-parser"));

var _projectionBuilder = _interopRequireDefault(require("./projection-builder"));

function QueryBuilder(model, params, opts) {
  var _this = this;

  var schema = _forestExpress.default.Schemas.schemas[_schema.default.getModelName(model)];

  var searchBuilder = new _searchBuilder.default(model, opts, params, schema.searchFields);
  var filterParser = new _filtersParser.default(model, params.timezone, opts);
  var projectionBuilder = new _projectionBuilder.default(schema);
  var filters = params.filters;

  this.joinAlreadyExists = function (field, joinQuery) {
    return !!_lodash.default.find(joinQuery, function (join) {
      return join && join.$lookup && join.$lookup.as === field.field;
    });
  };

  this.getFieldNamesRequested = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee() {
    var associations, _params$sort$split, _params$sort$split2, associationFromSorting;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!params.fields || !params.fields[model.collection.name])) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", null);

          case 2:
            if (!params.filters) {
              _context.next = 8;
              break;
            }

            _context.next = 5;
            return filterParser.getAssociations(params.filters);

          case 5:
            _context.t0 = _context.sent;
            _context.next = 9;
            break;

          case 8:
            _context.t0 = [];

          case 9:
            associations = _context.t0;

            if (params.sort && params.sort.includes('.')) {
              _params$sort$split = params.sort.split('.'), _params$sort$split2 = (0, _slicedToArray2.default)(_params$sort$split, 1), associationFromSorting = _params$sort$split2[0];

              if (associationFromSorting[0] === '-') {
                associationFromSorting = associationFromSorting.substring(1);
              }

              associations.push(associationFromSorting);
            }

            return _context.abrupt("return", _lodash.default.union(params.fields[model.collection.name].split(','), associations));

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  this.addProjection = function (jsonQuery) {
    return _this.getFieldNamesRequested().then(function (fieldNames) {
      return projectionBuilder.getProjection(fieldNames);
    }).then(function (projection) {
      return projection && jsonQuery.push(projection);
    });
  };

  this.addJoinToQuery = function (field, joinQuery) {
    if (field.reference && !field.isVirtual && !field.integration) {
      if (_this.joinAlreadyExists(field, joinQuery)) {
        return _this;
      }

      var referencedKey = field.reference.split('.')[1];

      var subModel = _schema.default.getReferenceModel(opts, field.reference);

      joinQuery.push({
        $lookup: {
          from: subModel.collection.name,
          localField: field.field,
          foreignField: referencedKey,
          as: field.field
        }
      });
      var fieldPath = field.field && model.schema.path(field.field);

      if (fieldPath && fieldPath.instance !== 'Array') {
        joinQuery.push({
          $unwind: {
            path: "$".concat(field.field),
            preserveNullAndEmptyArrays: true
          }
        });
      }
    }

    return _this;
  };

  this.joinAllReferences = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(jsonQuery, alreadyJoinedQuery) {
      var fieldNames;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.getFieldNamesRequested();

            case 2:
              fieldNames = _context2.sent;
              schema.fields.forEach(function (field) {
                if (fieldNames && !fieldNames.includes(field.field) || _this.joinAlreadyExists(field, alreadyJoinedQuery)) {
                  return;
                }

                _this.addJoinToQuery(field, jsonQuery);
              });
              return _context2.abrupt("return", _this);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  this.addFiltersToQuery = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(jsonQuery) {
      var newFilters, newFiltersString;
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return filterParser.replaceAllReferences(filters);

            case 2:
              newFilters = _context3.sent;
              newFiltersString = JSON.stringify(newFilters);
              _context3.t0 = jsonQuery;
              _context3.next = 7;
              return filterParser.perform(newFiltersString);

            case 7:
              _context3.t1 = _context3.sent;

              _context3.t0.push.call(_context3.t0, _context3.t1);

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }();

  this.addSortToQuery = function (jsonQuery) {
    var order = params.sort.startsWith('-') ? -1 : 1;
    var sortParam = order > 0 ? params.sort : params.sort.substring(1);

    if (params.sort.split('.').length > 1) {
      var _params$sort$split3 = params.sort.split('.');

      var _params$sort$split4 = (0, _slicedToArray2.default)(_params$sort$split3, 1);

      sortParam = _params$sort$split4[0];

      var _params$sort$split5 = params.sort.split('.'),
          _params$sort$split6 = (0, _slicedToArray2.default)(_params$sort$split5, 1),
          association = _params$sort$split6[0];

      _this.addJoinToQuery(association, jsonQuery);
    }

    jsonQuery.push({
      $sort: (0, _defineProperty2.default)({}, sortParam, order)
    });
    return _this;
  };

  this.addSkipAndLimitToQuery = function (jsonQuery) {
    jsonQuery.push({
      $skip: _this.getSkip()
    });
    jsonQuery.push({
      $limit: _this.getLimit()
    });
    return _this;
  };

  this.addCountToQuery = function (jsonQuery) {
    if (_orm.default.hasRequiredVersion(opts.mongoose, '3.4')) {
      jsonQuery.push({
        $count: 'count'
      });
    } else {
      jsonQuery.push({
        $group: {
          _id: null,
          count: {
            $sum: 1
          }
        }
      });
    }

    return _this;
  };

  this.hasPagination = function () {
    return params.page && params.page.number;
  };

  this.getLimit = function () {
    return _this.hasPagination() && params.page.size ? Number.parseInt(params.page.size, 10) : 10;
  };

  this.getSkip = function () {
    return _this.hasPagination() ? (Number.parseInt(params.page.number, 10) - 1) * _this.getLimit() : 0;
  };

  this.hasSmartFieldSearch = function () {
    return searchBuilder.hasSmartFieldSearch;
  };

  this.getFieldsSearched = function () {
    return searchBuilder.getFieldsSearched();
  };

  this.getQueryWithFiltersAndJoins = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(segment) {
      var jsonQuery;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              jsonQuery = [];
              _context4.next = 3;
              return _this.addFiltersAndJoins(jsonQuery, segment);

            case 3:
              return _context4.abrupt("return", jsonQuery);

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  this.addFiltersAndJoins = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5(jsonQuery, segment) {
      var conditions;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              conditions = [];

              if (!filters) {
                _context5.next = 4;
                break;
              }

              _context5.next = 4;
              return _this.addFiltersToQuery(conditions);

            case 4:
              if (!params.search) {
                _context5.next = 7;
                break;
              }

              _context5.next = 7;
              return searchBuilder.getWhere(conditions);

            case 7:
              if (segment) {
                conditions.push(segment.where);
              }

              if (conditions.length) {
                jsonQuery.push({
                  $match: {
                    $and: conditions
                  }
                });
              }

              return _context5.abrupt("return", _this);

            case 10:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function (_x5, _x6) {
      return _ref5.apply(this, arguments);
    };
  }();
}

module.exports = QueryBuilder;