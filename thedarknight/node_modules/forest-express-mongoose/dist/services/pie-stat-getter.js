"use strict";

var _interopRequireDefault = require("babel-runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("babel-runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("babel-runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _forestExpress = _interopRequireDefault(require("forest-express"));

var _moment = _interopRequireDefault(require("moment"));

var _queryBuilder = _interopRequireDefault(require("./query-builder"));

var _schema = _interopRequireDefault(require("../utils/schema"));

function PieStatGetter(model, params, opts) {
  var schema = _forestExpress.default.Schemas.schemas[_schema.default.getModelName(model)];

  var field = _lodash.default.find(schema.fields, {
    field: params.group_by_field
  });

  var queryBuilder = new _queryBuilder.default(model, params, opts);

  function getReference(fieldName) {
    var fieldNameWithoutSubField = fieldName.includes(':') ? fieldName.split(':')[0] : fieldName;

    var currentField = _lodash.default.find(schema.fields, {
      field: fieldNameWithoutSubField
    });

    return currentField.reference ? currentField : null;
  }

  this.perform = function () {
    var populateGroupByField = getReference(params.group_by_field);
    var groupByFieldName = populateGroupByField ? params.group_by_field.replace(':', '.') : params.group_by_field;
    return new _bluebird.default(function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(resolve, reject) {
        var jsonQuery, query, sum;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return queryBuilder.getQueryWithFiltersAndJoins(null);

              case 2:
                jsonQuery = _context.sent;

                if (populateGroupByField) {
                  queryBuilder.addJoinToQuery(populateGroupByField, jsonQuery);
                }

                query = model.aggregate(jsonQuery);
                sum = 1;

                if (params.aggregate_field) {
                  sum = "$".concat(params.aggregate_field);
                }

                query.group({
                  _id: "$".concat(groupByFieldName),
                  count: {
                    $sum: sum
                  }
                }).project({
                  key: '$_id',
                  value: '$count',
                  _id: false
                }).sort({
                  value: -1
                }).exec(function (err, records) {
                  return err ? reject(err) : resolve({
                    value: records
                  });
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()).then(function (records) {
      if (field && field.type === 'Date') {
        _lodash.default.each(records.value, function (record) {
          record.key = (0, _moment.default)(record.key).format('DD/MM/YYYY HH:mm:ss');
        });
      }

      return records;
    });
  };
}

module.exports = PieStatGetter;