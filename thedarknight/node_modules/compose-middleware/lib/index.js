"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require("debug");
var flatten = require("array-flatten");
var log = debug('compose-middleware');
function compose() {
    var handlers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        handlers[_i] = arguments[_i];
    }
    var middleware = errors.apply(void 0, handlers);
    return function (req, res, done) {
        return middleware(null, req, res, done);
    };
}
exports.compose = compose;
function errors() {
    var handlers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        handlers[_i] = arguments[_i];
    }
    var stack = flatten(handlers);
    for (var _a = 0, stack_1 = stack; _a < stack_1.length; _a++) {
        var handler = stack_1[_a];
        if (typeof handler !== 'function') {
            throw new TypeError('Handlers must be a function');
        }
    }
    return function middleware(err, req, res, done) {
        var index = -1;
        function dispatch(pos, err) {
            index = pos;
            if (index === stack.length) {
                return done(err);
            }
            var handler = stack[pos];
            function next(err) {
                if (pos < index) {
                    throw new TypeError('`next()` called multiple times');
                }
                return dispatch(pos + 1, err);
            }
            try {
                if (handler.length === 4) {
                    if (err) {
                        log('handle(err)', handler.name || '<anonymous>');
                        return handler(err, req, res, next);
                    }
                }
                else {
                    if (!err) {
                        log('handle()', handler.name || '<anonymous>');
                        return handler(req, res, next);
                    }
                }
            }
            catch (e) {
                if (index > pos)
                    throw e;
                log('try..catch', e);
                return next(e);
            }
            return next(err);
        }
        return dispatch(0, err);
    };
}
exports.errors = errors;
//# sourceMappingURL=index.js.map