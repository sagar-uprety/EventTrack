import flatten = require('array-flatten');
export declare type Next<T = void> = (err?: Error) => T;
export declare type RequestHandler<T = any, U = any, V = void> = (req?: T, res?: U, next?: Next<V>) => V;
export declare type ErrorHandler<T = any, U = any, V = void> = (err?: Error, req?: T, res?: U, next?: Next<V>) => V;
export declare type Middleware<T = any, U = any, V = void> = RequestHandler<T, U, V> | ErrorHandler<T, U, V>;
export declare type Handler<T = any, U = any, V = void> = Middleware<T, U, V> | flatten.NestedArray<Middleware<T, U, V>>;
export declare function compose<T, U, V = void>(...handlers: Handler<T, U, V>[]): RequestHandler<T, U, V>;
export declare function errors<T, U, V = void>(...handlers: Handler<T, U, V>[]): ErrorHandler<T, U, V>;
