{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,6BAA+B;AAC/B,uCAAyC;AAEzC,IAAM,GAAG,GAAG,KAAK,CAAC,oBAAoB,CAAC,CAAA;AAYvC;IAA0C,kBAA+B;SAA/B,UAA+B,EAA/B,qBAA+B,EAA/B,IAA+B;QAA/B,6BAA+B;;IACvE,IAAM,UAAU,GAAG,MAAM,eAAI,QAAQ,CAAC,CAAA;IAEtC,MAAM,CAAC,UAAU,GAAQ,EAAE,GAAQ,EAAE,IAAa;QAChD,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IACzC,CAAC,CAAA;AACH,CAAC;AAND,0BAMC;AAKD;IAAyC,kBAA+B;SAA/B,UAA+B,EAA/B,qBAA+B,EAA/B,IAA+B;QAA/B,6BAA+B;;IACtE,IAAM,KAAK,GAAG,OAAO,CAAsB,QAAQ,CAAC,CAAA;IAEpD,GAAG,CAAC,CAAkB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK;QAAtB,IAAM,OAAO,cAAA;QAChB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAA;QACpD,CAAC;KACF;IAED,MAAM,CAAC,oBAAqB,GAAQ,EAAE,GAAM,EAAE,GAAM,EAAE,IAAa;QACjE,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;QAEd,kBAAmB,GAAW,EAAE,GAAW;YACzC,KAAK,GAAG,GAAG,CAAA;YAEX,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAClB,CAAC;YAED,IAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;YAE1B,cAAe,GAAW;gBACxB,EAAE,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;oBAChB,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC,CAAA;gBACvD,CAAC;gBAED,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;YAC/B,CAAC;YAED,IAAI,CAAC;gBACH,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACzB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACR,GAAG,CAAC,aAAa,EAAG,OAAe,CAAC,IAAI,IAAI,aAAa,CAAC,CAAA;wBAE1D,MAAM,CAAE,OAAiC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;oBAChE,CAAC;gBACH,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACT,GAAG,CAAC,UAAU,EAAG,OAAe,CAAC,IAAI,IAAI,aAAa,CAAC,CAAA;wBAEvD,MAAM,CAAE,OAAmC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;oBAC7D,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEX,EAAE,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC;oBAAC,MAAM,CAAC,CAAA;gBAExB,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAA;gBAEpB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAChB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAClB,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;IACzB,CAAC,CAAA;AACH,CAAC;AAzDD,wBAyDC","sourcesContent":["import debug = require('debug')\nimport flatten = require('array-flatten')\n\nconst log = debug('compose-middleware')\n\nexport type Next<T = void> = (err?: Error) => T\nexport type RequestHandler <T = any, U = any, V = void> = (req?: T, res?: U, next?: Next<V>) => V\nexport type ErrorHandler <T = any, U = any, V = void> = (err?: Error, req?: T, res?: U, next?: Next<V>) => V\nexport type Middleware <T = any, U = any, V = void> = RequestHandler<T, U, V> | ErrorHandler<T, U, V>\n\nexport type Handler <T = any, U = any, V = void> = Middleware<T, U, V> | flatten.NestedArray<Middleware<T, U, V>>\n\n/**\n * Compose an array of middleware handlers into a single handler.\n */\nexport function compose <T, U, V = void> (...handlers: Handler<T, U, V>[]): RequestHandler<T, U, V> {\n  const middleware = errors(...handlers)\n\n  return function (req: any, res: any, done: Next<V>) {\n    return middleware(null, req, res, done)\n  }\n}\n\n/**\n * Wrap middleware handlers.\n */\nexport function errors <T, U, V = void> (...handlers: Handler<T, U, V>[]): ErrorHandler<T, U, V> {\n  const stack = flatten<Middleware<T, U, V>>(handlers)\n\n  for (const handler of stack) {\n    if (typeof handler !== 'function') {\n      throw new TypeError('Handlers must be a function')\n    }\n  }\n\n  return function middleware (err: any, req: T, res: U, done: Next<V>): V {\n    let index = -1\n\n    function dispatch (pos: number, err?: Error): V {\n      index = pos\n\n      if (index === stack.length) {\n        return done(err)\n      }\n\n      const handler = stack[pos]\n\n      function next (err?: Error) {\n        if (pos < index) {\n          throw new TypeError('`next()` called multiple times')\n        }\n\n        return dispatch(pos + 1, err)\n      }\n\n      try {\n        if (handler.length === 4) {\n          if (err) {\n            log('handle(err)', (handler as any).name || '<anonymous>')\n\n            return (handler as ErrorHandler<T, U, V>)(err, req, res, next)\n          }\n        } else {\n          if (!err) {\n            log('handle()', (handler as any).name || '<anonymous>')\n\n            return (handler as RequestHandler<T, U, V>)(req, res, next)\n          }\n        }\n      } catch (e) {\n        // Avoid future errors that could diverge stack execution.\n        if (index > pos) throw e\n\n        log('try..catch', e)\n\n        return next(e)\n      }\n\n      return next(err)\n    }\n\n    return dispatch(0, err)\n  }\n}\n"]}