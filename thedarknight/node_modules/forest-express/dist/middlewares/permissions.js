"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var httpError = require('http-errors');

var PermissionsChecker = require('../services/permissions-checker');

var logger = require('../services/logger');

var ConfigStore = require('../services/config-store');

var getRenderingIdFromUser = function getRenderingIdFromUser(user) {
  return user.renderingId;
};

var PermissionMiddlewareCreator =
/*#__PURE__*/
function () {
  function PermissionMiddlewareCreator(collectionName) {
    (0, _classCallCheck2["default"])(this, PermissionMiddlewareCreator);
    this.collectionName = collectionName;
    this.configStore = ConfigStore.getInstance();
  }

  (0, _createClass2["default"])(PermissionMiddlewareCreator, [{
    key: "_checkPermission",
    value: function _checkPermission(permissionName) {
      var _this = this;

      return function (request, response, next) {
        var environmentSecret = _this.configStore.lianaOptions.envSecret;
        var renderingId = getRenderingIdFromUser(request.user);
        return new PermissionsChecker(environmentSecret, renderingId, _this.collectionName, permissionName).perform().then(next)["catch"](function (error) {
          logger.error(error.message);
          next(httpError(403));
        });
      };
    }
  }, {
    key: "list",
    value: function list() {
      var _this2 = this;

      return function (request, response, next) {
        var searchToEdit = request.query.searchToEdit;
        var permissionName = searchToEdit ? 'searchToEdit' : 'list';
        return _this2._checkPermission(permissionName)(request, response, next);
      };
    }
  }, {
    key: "export",
    value: function _export() {
      return this._checkPermission('export');
    }
  }, {
    key: "details",
    value: function details() {
      return this._checkPermission('show');
    }
  }, {
    key: "create",
    value: function create() {
      return this._checkPermission('create');
    }
  }, {
    key: "update",
    value: function update() {
      return this._checkPermission('update');
    }
  }, {
    key: "delete",
    value: function _delete() {
      return this._checkPermission('delete');
    }
  }]);
  return PermissionMiddlewareCreator;
}();

module.exports = PermissionMiddlewareCreator;