"use strict";

var P = require('bluebird');

var moment = require('moment');

var VError = require('verror');

var forestServerRequester = require('./forest-server-requester');

var permissionsPerRendering = {};

function PermissionsChecker(environmentSecret, renderingId, collectionName, permissionName) {
  var EXPIRATION_IN_SECONDS = process.env.FOREST_PERMISSIONS_EXPIRATION_IN_SECONDS || 3600;

  function isAllowed() {
    var permissions = permissionsPerRendering[renderingId] && permissionsPerRendering[renderingId].data;

    if (!permissions || !permissions[collectionName] || !permissions[collectionName].collection) {
      return false;
    }

    return permissions[collectionName].collection[permissionName];
  }

  function retrievePermissions() {
    return forestServerRequester.perform('/liana/v2/permissions', environmentSecret, {
      renderingId: renderingId
    }).then(function (responseBody) {
      permissionsPerRendering[renderingId] = {
        data: responseBody,
        lastRetrieve: moment()
      };
    })["catch"](function (error) {
      return P.reject(new VError(error, 'Permissions error'));
    });
  }

  function isPermissionExpired() {
    if (!permissionsPerRendering[renderingId] || !permissionsPerRendering[renderingId].lastRetrieve) {
      return true;
    }

    var lastRetrieve = permissionsPerRendering[renderingId].lastRetrieve;
    var currentTime = moment();

    if (!lastRetrieve) {
      return true;
    }

    var elapsedSeconds = currentTime.diff(lastRetrieve, 'seconds');
    return elapsedSeconds >= EXPIRATION_IN_SECONDS;
  }

  function retrievePermissionsAndCheckAllowed(resolve, reject) {
    return retrievePermissions().then(function () {
      return isAllowed() ? resolve() : reject(new Error("'".concat(permissionName, "' access forbidden on ").concat(collectionName)));
    })["catch"](reject);
  }

  this.perform = function () {
    return new P(function (resolve, reject) {
      if (isPermissionExpired()) {
        return retrievePermissionsAndCheckAllowed(resolve, reject);
      }

      if (!isAllowed(collectionName, permissionName)) {
        return retrievePermissionsAndCheckAllowed(resolve, reject);
      }

      return resolve();
    });
  };
}

PermissionsChecker.cleanCache = function () {
  permissionsPerRendering = {};
};

PermissionsChecker.resetExpiration = function (renderingId) {
  var permissions = permissionsPerRendering[renderingId] && permissionsPerRendering[renderingId].data;

  if (permissions) {
    permissions.lastRetrieve = null;
  }
};

PermissionsChecker.getLastRetrieveTime = function (renderingId) {
  if (!permissionsPerRendering[renderingId]) {
    return null;
  }

  return permissionsPerRendering[renderingId].lastRetrieve;
};

PermissionsChecker.getPermissions = function (renderingId) {
  if (!permissionsPerRendering[renderingId]) {
    return null;
  }

  return permissionsPerRendering[renderingId].data;
};

module.exports = PermissionsChecker;