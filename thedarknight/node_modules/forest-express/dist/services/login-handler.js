"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var jwt = require('jsonwebtoken');

var otplib = require('otplib');

var logger = require('../services/logger.js');

var UserSecretCreator = require('./user-secret-creator');

var AuthorizationFinder = require('./authorization-finder');

var TwoFactorRegistrationConfirmer = require('../services/two-factor-registration-confirmer');

function LoginHandler(_ref) {
  var renderingId = _ref.renderingId,
      envSecret = _ref.envSecret,
      authData = _ref.authData,
      useGoogleAuthentication = _ref.useGoogleAuthentication,
      authSecret = _ref.authSecret,
      twoFactorRegistration = _ref.twoFactorRegistration,
      projectId = _ref.projectId,
      twoFactorToken = _ref.twoFactorToken;
  var forestToken = authData.forestToken,
      email = authData.email,
      password = authData.password;

  function isTwoFactorTokenValid(user, token) {
    var twoFactorAuthenticationSecret = user.two_factor_authentication_secret;
    var userSecret = new UserSecretCreator(twoFactorAuthenticationSecret, process.env.FOREST_2FA_SECRET_SALT).perform();
    return otplib.authenticator.verify({
      token: token,
      secret: userSecret
    });
  }

  function getTwoFactorResponse(user) {
    var TWO_FACTOR_SECRET_SALT = process.env.FOREST_2FA_SECRET_SALT;

    if (TWO_FACTOR_SECRET_SALT === undefined) {
      logger.error('Cannot use the two factor authentication because the environment variable "FOREST_2FA_SECRET_SALT" is not set.\nYou can generate it using this command: `$ openssl rand -hex 10`');
      throw new Error('Invalid 2FA configuration, please ask more information to your admin');
    }

    if (TWO_FACTOR_SECRET_SALT.length !== 20) {
      logger.error('The FOREST_2FA_SECRET_SALT environment variable must be 20 characters long.\nYou can generate it using this command: `$ openssl rand -hex 10`');
      throw new Error('Invalid 2FA configuration, please ask more information to your admin');
    }

    if (user.two_factor_authentication_active) {
      return {
        twoFactorAuthenticationEnabled: true
      };
    }

    var twoFactorAuthenticationSecret = user.two_factor_authentication_secret;
    var userSecret = new UserSecretCreator(twoFactorAuthenticationSecret, TWO_FACTOR_SECRET_SALT).perform();
    return {
      twoFactorAuthenticationEnabled: true,
      userSecret: userSecret
    };
  }

  function createToken(user, sessionRenderingId) {
    return jwt.sign({
      id: user.id,
      email: user.email,
      firstName: user.first_name,
      lastName: user.last_name,
      team: user.teams[0],
      renderingId: sessionRenderingId
    }, authSecret, {
      expiresIn: '14 days'
    });
  }

  this.perform = function _callee() {
    var user;
    return _regenerator["default"].async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!useGoogleAuthentication) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return _regenerator["default"].awrap(new AuthorizationFinder(renderingId, envSecret, twoFactorRegistration, null, null, forestToken).perform());

          case 3:
            user = _context.sent;
            _context.next = 9;
            break;

          case 6:
            _context.next = 8;
            return _regenerator["default"].awrap(new AuthorizationFinder(renderingId, envSecret, twoFactorRegistration, email, password).perform());

          case 8:
            user = _context.sent;

          case 9:
            if (user) {
              _context.next = 11;
              break;
            }

            throw new Error();

          case 11:
            if (!user.two_factor_authentication_enabled) {
              _context.next = 21;
              break;
            }

            if (!twoFactorToken) {
              _context.next = 20;
              break;
            }

            if (!isTwoFactorTokenValid(user, twoFactorToken)) {
              _context.next = 17;
              break;
            }

            _context.next = 16;
            return _regenerator["default"].awrap(new TwoFactorRegistrationConfirmer({
              projectId: projectId,
              envSecret: envSecret,
              useGoogleAuthentication: useGoogleAuthentication,
              email: email,
              forestToken: forestToken
            }).perform());

          case 16:
            return _context.abrupt("return", {
              token: createToken(user, renderingId)
            });

          case 17:
            throw new Error('Your token is invalid, please try again.');

          case 20:
            return _context.abrupt("return", getTwoFactorResponse(user));

          case 21:
            return _context.abrupt("return", {
              token: createToken(user, renderingId)
            });

          case 22:
          case "end":
            return _context.stop();
        }
      }
    });
  };
}

module.exports = LoginHandler;