"use strict";

var _ = require('lodash');

var fs = require('fs');

var logger = require('../services/logger');

var _require = require('../utils/string'),
    parameterize = _require.parameterize;

var _require2 = require('../utils/json'),
    prettyPrint = _require2.prettyPrint;

function SchemaFileUpdater(filename, collections, meta, serializerOptions) {
  var formatObject = function formatObject(object, attributes) {
    var objectFormated = {};

    var objectOrdered = _.sortBy(Object.keys(object), function (attribute) {
      return attributes.indexOf(attribute);
    });

    _.each(objectOrdered, function (attribute) {
      if (attributes.includes(attribute)) {
        objectFormated[attribute] = object[attribute];
      }
    });

    return objectFormated;
  };

  function setDefaultValueIfNecessary(object, property, value) {
    if (!Object.prototype.hasOwnProperty.call(object, property)) {
      object[property] = value;
    }
  }

  var cleanFields = function cleanFields(fields) {
    fields = fields.filter(function (field) {
      return field.field;
    });
    fields.forEach(function (field) {
      if (field.defaultValue === undefined) {
        field.defaultValue = null;
      }

      setDefaultValueIfNecessary(field, 'type', 'String');
      setDefaultValueIfNecessary(field, 'isRequired', false);
      setDefaultValueIfNecessary(field, 'isReadOnly', false);
      setDefaultValueIfNecessary(field, 'isSortable', true);
      setDefaultValueIfNecessary(field, 'isFilterable', true);
      setDefaultValueIfNecessary(field, 'isVirtual', false);
      setDefaultValueIfNecessary(field, 'description', null);
      setDefaultValueIfNecessary(field, 'reference', null);
      setDefaultValueIfNecessary(field, 'inverseOf', null);
      setDefaultValueIfNecessary(field, 'relationships', null);
      setDefaultValueIfNecessary(field, 'enums', null);
      setDefaultValueIfNecessary(field, 'validations', null);
      setDefaultValueIfNecessary(field, 'integration', null);
      field.validations = field.validations || [];
      field.validations.forEach(function (validation) {
        if (validation.message === undefined) {
          validation.message = null;
        }

        setDefaultValueIfNecessary(validation, 'value', null);
      });
    });
    return fields;
  };

  var cleanSegments = function cleanSegments(segments) {
    return segments.filter(function (segment) {
      return segment.name;
    });
  };

  var cleanActions = function cleanActions(actions) {
    actions = actions.filter(function (action) {
      return action.name;
    });
    actions.forEach(function (action) {
      if (action.global) {
        logger.warn("REMOVED OPTION: The support for Smart Action \"global\" option is now removed. Please set \"type: 'global'\" instead of \"global: true\" for the \"".concat(action.name, "\" Smart Action."));
      }

      if (action.type && !_.includes(['bulk', 'global', 'single'], action.type)) {
        logger.warn("Please set a valid Smart Action type (\"bulk\", \"global\" or \"single\") for the \"".concat(action.name, "\" Smart Action."));
        action.type = null;
      }

      setDefaultValueIfNecessary(action, 'endpoint', "/forest/actions/".concat(parameterize(action.name)));
      setDefaultValueIfNecessary(action, 'httpMethod', 'POST');
      setDefaultValueIfNecessary(action, 'fields', []);
      setDefaultValueIfNecessary(action, 'redirect', null);
      setDefaultValueIfNecessary(action, 'baseUrl', null);
      setDefaultValueIfNecessary(action, 'type', 'bulk');
      setDefaultValueIfNecessary(action, 'download', false); // NOTICE: Set a position to the Smart Actions fields.

      action.fields = action.fields.filter(function (field) {
        return field.field;
      });

      _.each(action.fields, function (field, position) {
        field.position = position;

        if (field.defaultValue === undefined) {
          field.defaultValue = null;
        }

        setDefaultValueIfNecessary(field, 'type', 'String');
        setDefaultValueIfNecessary(field, 'isRequired', false);
        setDefaultValueIfNecessary(field, 'description', null);
        setDefaultValueIfNecessary(field, 'reference', null);
        setDefaultValueIfNecessary(field, 'enums', null);
        setDefaultValueIfNecessary(field, 'widget', null);
      });
    });
    return actions;
  };

  var cleanCollection = function cleanCollection(collection) {
    if (_.isNil(collection.isSearchable)) {
      collection.isSearchable = true;
    }

    setDefaultValueIfNecessary(collection, 'onlyForRelationships', false);
    setDefaultValueIfNecessary(collection, 'isVirtual', false);
    setDefaultValueIfNecessary(collection, 'isReadOnly', false);
    setDefaultValueIfNecessary(collection, 'paginationType', 'page');
    setDefaultValueIfNecessary(collection, 'icon', null);
    setDefaultValueIfNecessary(collection, 'nameOld', collection.name);
    setDefaultValueIfNecessary(collection, 'integration', null);
    setDefaultValueIfNecessary(collection, 'fields', []);
    setDefaultValueIfNecessary(collection, 'segments', []);
    setDefaultValueIfNecessary(collection, 'actions', []);
    collection.fields = cleanFields(collection.fields);
    collection.segments = cleanSegments(collection.segments);
    collection.actions = cleanActions(collection.actions);
  };

  this.perform = function () {
    collections = collections.map(function (collection) {
      cleanCollection(collection);
      var collectionFormatted = formatObject(collection, serializerOptions.attributes);
      collectionFormatted.fields = collectionFormatted.fields || [];
      collectionFormatted.fields = collectionFormatted.fields.map(function (field) {
        var fieldFormatted = formatObject(field, serializerOptions.fields.attributes);
        fieldFormatted.validations = fieldFormatted.validations.map(function (validation) {
          return formatObject(validation, serializerOptions.validations.attributes);
        });
        return fieldFormatted;
      });
      collectionFormatted.fields = _.sortBy(collectionFormatted.fields, ['field', 'type']);
      collectionFormatted.segments = collectionFormatted.segments || [];
      collectionFormatted.segments = collectionFormatted.segments.map(function (segment) {
        return formatObject(segment, serializerOptions.segments.attributes);
      });
      collectionFormatted.segments = _.sortBy(collectionFormatted.segments, ['name']);
      collectionFormatted.actions = collectionFormatted.actions || [];
      collectionFormatted.actions = collectionFormatted.actions.map(function (action) {
        var actionFormatted = formatObject(action, serializerOptions.actions.attributes);
        actionFormatted.fields = actionFormatted.fields || [];
        actionFormatted.fields = actionFormatted.fields.map(function (field) {
          return formatObject(field, serializerOptions.actions.fields.attributes);
        });
        return actionFormatted;
      });
      collectionFormatted.actions = _.sortBy(collectionFormatted.actions, ['name']);
      return collectionFormatted;
    });
    collections.sort(function (collection1, collection2) {
      return collection1.name.localeCompare(collection2.name);
    });
    var schema = {
      collections: collections,
      meta: meta
    }; // NOTICE: Escape '\' characters to ensure the generation of valid JSON files. It fixes
    //         potential issues if some fields have validations using complex regexp.

    fs.writeFileSync(filename, prettyPrint(schema).replace(/[^\\]\\[^\\"]/g, function (x) {
      return x.replace('\\', '\\\\');
    }));
    return schema;
  };
}

module.exports = SchemaFileUpdater;