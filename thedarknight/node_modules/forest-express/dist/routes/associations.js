"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _ = require('lodash');

var nodePath = require('path');

var SchemaUtil = require('../utils/schema');

var auth = require('../services/auth');

var path = require('../services/path');

var ResourceSerializer = require('../serializers/resource');

var Schemas = require('../generators/schemas');

var CSVExporter = require('../services/csv-exporter');

var ResourceDeserializer = require('../deserializers/resource');

module.exports = function Associations(app, model, Implementation, integrator, opts) {
  var modelName = Implementation.getModelName(model);
  var schema = Schemas.schemas[modelName];

  function getAssociationField(associationName) {
    var field = _.find(schema.fields, {
      field: associationName
    });

    if (field && field.reference) {
      return field.reference.split('.')[0];
    }

    return null;
  }

  function getAssociation(request) {
    var pathSplit = request.route.path.split('/');
    var associationName = pathSplit[pathSplit.length - 1];

    if (nodePath.extname(associationName) === '.csv') {
      associationName = nodePath.basename(associationName, '.csv');
    } else if (associationName === 'count') {
      associationName = pathSplit[pathSplit.length - 2];
    }

    return {
      associationName: associationName
    };
  }

  function getContext(request) {
    var association = getAssociation(request);

    var params = _.extend(request.query, request.params, association);

    var models = Implementation.getModels();
    var associationField = getAssociationField(params.associationName);

    var associationModel = _.find(models, function (refModel) {
      return Implementation.getModelName(refModel) === associationField;
    });

    return {
      params: params,
      associationModel: associationModel
    };
  }

  function list(request, response, next) {
    var _getContext = getContext(request),
        params = _getContext.params,
        associationModel = _getContext.associationModel;

    return new Implementation.HasManyGetter(model, associationModel, opts, params).perform().then(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          records = _ref2[0],
          fieldsSearched = _ref2[1];

      return new ResourceSerializer(Implementation, associationModel, records, integrator, null, fieldsSearched, params.search).perform();
    }).then(function (records) {
      return response.send(records);
    })["catch"](next);
  }

  function count(request, response, next) {
    var _getContext2 = getContext(request),
        params = _getContext2.params,
        associationModel = _getContext2.associationModel;

    return new Implementation.HasManyGetter(model, associationModel, opts, params).count().then(function (recordsCount) {
      return response.send({
        count: recordsCount
      });
    })["catch"](next);
  }

  function exportCSV(request, response, next) {
    var _getContext3 = getContext(request),
        params = _getContext3.params,
        associationModel = _getContext3.associationModel;

    var recordsExporter = new Implementation.ResourcesExporter(model, opts, params, associationModel);
    return new CSVExporter(params, response, Implementation.getModelName(associationModel), recordsExporter).perform()["catch"](next);
  }

  function add(request, response, next) {
    var params = _.extend(request.params, getAssociation(request));

    var data = request.body;
    var models = Implementation.getModels();
    var associationField = getAssociationField(params.associationName);

    var associationModel = _.find(models, function (innerModel) {
      return Implementation.getModelName(innerModel) === associationField;
    });

    return new Implementation.HasManyAssociator(model, associationModel, opts, params, data).perform().then(function () {
      response.status(204).send();
    })["catch"](next);
  }

  function remove(request, response, next) {
    var params = _.extend(request.params, getAssociation(request), request.query);

    var data = request.body;
    var models = Implementation.getModels();
    var associationField = getAssociationField(params.associationName);

    var associationModel = _.find(models, function (innerModel) {
      return Implementation.getModelName(innerModel) === associationField;
    });

    return new Implementation.HasManyDissociator(model, associationModel, opts, params, data).perform().then(function () {
      response.status(204).send();
    })["catch"](next);
  }

  function update(request, response, next) {
    var params = _.extend(request.params, getAssociation(request));

    var data = request.body;
    var models = Implementation.getModels();
    var associationField = getAssociationField(params.associationName);

    var associationModel = _.find(models, function (innerModel) {
      return Implementation.getModelName(innerModel) === associationField;
    });

    return new Implementation.BelongsToUpdater(model, associationModel, opts, params, data).perform().then(function () {
      response.status(204).send();
    })["catch"](next);
  }

  function updateEmbeddedDocument(association) {
    return function (request, response, next) {
      return new ResourceDeserializer(Implementation, model, request.body, false).perform().then(function (record) {
        return new Implementation.EmbeddedDocumentUpdater(model, request.params, association, record).perform();
      }).then(function () {
        return response.status(204).send();
      })["catch"](next);
    };
  }

  this.perform = function () {
    // NOTICE: HasMany associations routes
    _.each(SchemaUtil.getHasManyAssociations(schema), function (association) {
      app.get(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field, ".csv"), opts), auth.ensureAuthenticated, exportCSV);
      app.get(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field), opts), auth.ensureAuthenticated, list);
      app.get(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field, "/count"), opts), auth.ensureAuthenticated, count);
      app.post(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field), opts), auth.ensureAuthenticated, add); // NOTICE: This route only works for embedded has many

      app.put(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field, "/:recordIndex"), opts), auth.ensureAuthenticated, updateEmbeddedDocument(association.field));
      app["delete"](path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field), opts), auth.ensureAuthenticated, remove);
    }); // NOTICE: belongsTo associations routes


    _.each(SchemaUtil.getBelongsToAssociations(schema), function (association) {
      app.put(path.generate("".concat(modelName, "/:recordId/relationships/").concat(association.field), opts), auth.ensureAuthenticated, update);
    });
  };
};